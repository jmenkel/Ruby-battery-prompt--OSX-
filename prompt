#!/Users/dyer/.rvm/rubies/ree-1.8.7-2010.02/bin/ruby
require 'rubygems'
require 'term/ansicolor'
include Term::ANSIColor

 # Use this trick to work around namespace cluttering that
 # happens if you just include Term::ANSIColor:
  class Color
    extend Term::ANSIColor
  end

  $ioreg_return = `ioreg -n AppleSmartBattery`
  
  full_deltas  = ""
  empty_deltas = ""

  # Returns true or false if battery is connected
  def battery_connected?
    $ioreg_return.split(' = ')[4].strip.split("\n")[0] == "Yes" ? true : false
  end

  # Returns the charge of the battery on a base 10 scale
  def charge
    ((sprintf("%.1f", (
         $ioreg_return.split(' = ')[15].strip.split("\n")[0].to_f / $ioreg_return.split(' = ')[9].strip.split("\n")[0].to_f )
        )).to_f*100).to_i
  end

  current_charge=charge
  (current_charge/10).times { full_deltas<<"▸" }
  ((100-current_charge)/10).times {empty_deltas<<"▹"} unless current_charge == 100

   if current_charge<=30
     full_deltas=full_deltas.red
   elsif current_charge<=60
     full_deltas= full_deltas.yellow
   else
     full_deltas= full_deltas.green
   end

   empty_deltas=empty_deltas.blue if battery_connected?
   
   print full_deltas + empty_deltas
